mines notes:

- Get mouse state handling fully implemented
  - Add highlight tile /
- Implement smiley /
- Implement timer /
- Implement proper layout /
- Implement post game view
- Refactor
- Implement custom mode

solver notes:
- Need to package API for minesweeper as module callable from other code
- Work out what interface to game we would need for solver to run.
- How to do solving:
   - In cleared cells,
      - Check if number of neighbouring mines == number of neigbouring hidden
          - Flag hidden
      - Check if number of flagged hidden == number of neighbouring mines
          - Clear unflagged hidden



Architecture notes:


Class smiley
 - Owns smiley face, sets it as required

Class game
 - Static functions to create game (easy, hard etc)
 - Contains grid, smiley
 - handles timer
 - handles win/lose
 - click handler for grid: Check win/lose

Class tile
 - Stores state for tile, ref for grid
 - has convenience methods to query neighbours
 - click handler functions
  mouseDown:
 - this as td - finds tile
 - Checks event button flag
 - Business logic on tile and game
  mouseUp:
 - Finds tile
 - Checks event button flag
 - Business logic on tile and game
 - Does fast clear
 - Does middle click


Class grid
 - Stores refs to table, minecounter
 - Stores tiles as Set
 - Provides tile lookup by index
 - Generate table and grid of tiles, and connect to click handlers
 - Populate with mines
 - Keep track of mine counter
 - render the tile (set the appropriate image)
